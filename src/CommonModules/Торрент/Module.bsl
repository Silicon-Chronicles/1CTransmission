#Область ПрограммныйИнтерфейс

#Область TorrentActionRequests

Процедура TorrentStart(МассивИдентификаторов) Экспорт
	
	Параметры = Новый Структура("ids", МассивИдентификаторов);
	
	ТелоЗапроса = ПолучитьТелоЗапроса("torrent-start", Параметры);
	Результат = ОтправитьЗапрос(ТелоЗапроса);
	
	Если Результат["result"] <> "success" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить операцию. Ошибка при вызове метода torrent-start'");
		ЗарегистрироватьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура TorrentStartNow(МассивИдентификаторов) Экспорт
	
	Параметры = Новый Структура("ids", МассивИдентификаторов);
	
	ТелоЗапроса = ПолучитьТелоЗапроса("torrent-start-now", Параметры);
	Результат = ОтправитьЗапрос(ТелоЗапроса);
	
	Если Результат["result"] <> "success" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить операцию. Ошибка при вызове метода torrent-start-now'");
		ЗарегистрироватьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура TorrentStop(МассивИдентификаторов) Экспорт
	
	Параметры = Новый Структура("ids", МассивИдентификаторов);
	
	ТелоЗапроса = ПолучитьТелоЗапроса("torrent-stop", Параметры);
	Результат = ОтправитьЗапрос(ТелоЗапроса);
	
	Если Результат["result"] <> "success" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить операцию. Ошибка при вызове метода torrent-stop'");
		ЗарегистрироватьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;		
	
КонецПроцедуры

Процедура TorrentVerify(МассивИдентификаторов) Экспорт
	
	Параметры = Новый Структура("ids", МассивИдентификаторов);
	
	ТелоЗапроса = ПолучитьТелоЗапроса("torrent-verify", Параметры);
	Результат = ОтправитьЗапрос(ТелоЗапроса);
	
	Если Результат["result"] <> "success" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить операцию. Ошибка при вызове метода torrent-verify'");
		ЗарегистрироватьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;		
		
КонецПроцедуры

Процедура TorrentReannounce(МассивИдентификаторов) Экспорт
	
	Параметры = Новый Структура("ids", МассивИдентификаторов);
	
	ТелоЗапроса = ПолучитьТелоЗапроса("torrent-reannounce", Параметры);
	Результат = ОтправитьЗапрос(ТелоЗапроса);
	
	Если Результат["result"] <> "success" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить операцию. Ошибка при вызове метода torrent-reannounce'");
		ЗарегистрироватьОшибку(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
	
Функция ПолучитьТелоЗапроса(Метод, Аргументы = Неопределено, Тэг = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	РезультатСтруктура = Новый Структура;
	Если ЗначениеЗаполнено(Аргументы) Тогда
		РезультатСтруктура.Вставить("arguments", Аргументы);
	КонецЕсли;
	РезультатСтруктура.Вставить("method", Метод);
	Если ЗначениеЗаполнено(Тэг) Тогда
		РезультатСтруктура.Вставить("tag", Тэг);
	Иначе
		РезультатСтруктура.Вставить("tag", 1);
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, РезультатСтруктура);
	
	Возврат ЗаписьJSON.Закрыть();	
	
КонецФункции

Функция ОтправитьЗапрос(ТелоЗапроса, ПрочитатьВСоответствие = Ложь)
	ПараметрыПреобразования = Новый Структура("ПрочитатьВСоответствие", ПрочитатьВСоответствие);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Transmission-Session-Id", ПараметрыСеанса.ТР_ИдентификаторСессии);
	ДополнительныеПараметры = Новый Структура("Заголовки", Заголовки);
	
	Результат = КоннекторHTTP.Post("http://192.168.88.9:9091/transmission/rpc", ТелоЗапроса, ДополнительныеПараметры);
	Если Результат.КодСостояния = 409 Тогда
		ПараметрыСеанса.ТР_ИдентификаторСессии = Результат.Заголовки["X-Transmission-Session-Id"];
		Заголовки.Вставить("X-Transmission-Session-Id", ПараметрыСеанса.ТР_ИдентификаторСессии);
		Результат = КоннекторHTTP.Post("http://192.168.88.9:9091/transmission/rpc", ТелоЗапроса, ДополнительныеПараметры);
		Если Результат.КодСостояния = 200 Тогда
			Возврат КоннекторHTTP.КакJson(Результат, ПараметрыПреобразования);	
		Иначе
			ВызватьИсключение КоннекторHTTP.КакТекст(Результат);
		КонецЕсли;
	ИначеЕсли Результат.КодСостояния = 200 Тогда
		Возврат КоннекторHTTP.КакJson(Результат, ПараметрыПреобразования);	
	Иначе
		ВызватьИсключение КоннекторHTTP.КакТекст(Результат);
	КонецЕсли;
		
КонецФункции

Функция PortTest() Экспорт
	
	ТелоЗапроса = ПолучитьТелоЗапроса("port-test");
	Результат = ОтправитьЗапрос(ТелоЗапроса);
	Если Результат["result"] = "success" Тогда
		Возврат Результат["arguments"]["port-is-open"];
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось получить значение'");
	КонецЕсли;
	
КонецФункции

Функция TorrentGet(Ид = Неопределено) Экспорт
	Поля = Новый Массив();
	Поля.Добавить("name");
	Поля.Добавить("id");
	Параметры = Новый Структура;
	Параметры.Вставить("fields", Поля);
	
	
	ТелоЗапроса = ПолучитьТелоЗапроса("torrent-get", Параметры);
	Результат = ОтправитьЗапрос(ТелоЗапроса);
	
	Если Результат["result"] = "success" Тогда
		Возврат Результат["arguments"]["torrents"];
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось получить значение'");
	КонецЕсли;
	
КонецФункции


Функция SessionStats() Экспорт
	
	ТелоЗапроса = ПолучитьТелоЗапроса("session-stats");
	Результат = ОтправитьЗапрос(ТелоЗапроса, Истина);
	
	Если Результат["result"] = "success" Тогда
		Возврат Результат["arguments"];
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось получить значение'");
	КонецЕсли;
КонецФункции

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьОшибку(ТекстОшибки)
	
	ИмяСобытия = НСтр("ru = 'КлиентTransmission'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти